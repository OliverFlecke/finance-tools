{"version":3,"sources":["services/formulas.ts","components/CompoundInterest/index.tsx","App.tsx","services/AccountService.ts","index.tsx"],"names":["FV","P","A","r","year","n","rate","ratePerPaymentPeriod","nper","Math","pow","p","CompoundInterest","useState","data","setData","useForm","register","handleSubmit","errors","formState","onSubmit","d","className","customInput","Input","thousandSeparator","label","placeholder","inputMode","errorMessage","existingAmount","message","required","interestRate","investmentPeriod","interestAccural","monthlyDeposit","type","parse","formatter","Intl","NumberFormat","style","currency","CalculationSummary","props","useMemo","isWithDeposits","balance","totalDeposits","totalInterest","amount","color","Array","keys","map","deposit","totalDeposit","totalBalance","lastYear","depositPrevious","balancePrevious","interest","format","AmountSummary","value","Number","parseFloat","toString","replace","App","accounts","localStorage","getItem","console","log","this","undefined","JSON","account","push","save","setItem","stringify","useDarkMode","isDarkMode","setDarkMode","useEffect","document","body","classList","contains","add","remove","onClick","rootElement","getElementById","Application","StrictMode","hasChildNodes","hydrate","render"],"mappings":"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","file":"static/js/main.6c907838.chunk.js","sourcesContent":["export type InterestAccrual = 'Yearly' | 'Monthly';\n\nexport function FV(P: number, A: number, r: number, year: number, n = 12): number {\n\tconst rate = ratePerPaymentPeriod(r, 1, n);\n\tconst nper = n * year;\n\treturn P * Math.pow(1 + rate, nper) + A * ((Math.pow(1 + rate, nper) - 1) / rate);\n}\n\nexport function compoundInterest(\n\tprincipal: number,\n\tinterestRate: number,\n\ttime: number,\n\tinterestAccrual: InterestAccrual\n): number {\n\tconst n = getInterestAccrualPerYear(interestAccrual);\n\treturn principal * Math.pow(1 + interestRate / n, n * time);\n}\n\nexport function futureValue(\n\tregularDeposit: number,\n\tinterestRate: number,\n\ttime: number,\n\tinterestAccrual: InterestAccrual,\n\tnumberOfDeposits: number,\n\tdepositsMadeAt: 'beginning' | 'end' = 'end'\n): number {\n\tconst n = getInterestAccrualPerYear(interestAccrual);\n\n\treturn (\n\t\tregularDeposit *\n\t\tnumberOfDeposits *\n\t\t(((Math.pow(1 + interestRate / n, n * time) - 1) / (interestRate / n)) *\n\t\t\t(depositsMadeAt === 'end' ? 1 : 1 + interestRate / n))\n\t);\n}\n\nexport function ratePerPaymentPeriod(r: number, n: number, p: number) {\n\treturn Math.pow(1 + r / n, n / p) - 1;\n}\n\nfunction getInterestAccrualPerYear(interestAccrual: InterestAccrual): number {\n\tswitch (interestAccrual) {\n\t\tcase 'Monthly':\n\t\t\treturn 12;\n\n\t\tcase 'Yearly':\n\t\tdefault:\n\t\t\treturn 1;\n\t}\n}\n","import { Button, Input } from '@oliverflecke/components-react';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport NumberFormat from 'react-number-format';\nimport { FV, InterestAccrual } from '../../services/formulas';\n\ninterface CompoundInterestProps {\n\tname?: string;\n}\n\ntype FormData = {\n\texistingAmount: number;\n\tinterestRate: number;\n\tinvestmentPeriod: number;\n\tinterestAccural: InterestAccrual;\n\tmonthlyDeposit: number;\n};\n\nconst CompoundInterest: FC<CompoundInterestProps> = ({}: CompoundInterestProps) => {\n\tconst [data, setData] = useState<FormData | null>(null);\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },\n\t} = useForm<FormData>({});\n\tconst onSubmit = handleSubmit((d) => setData(d));\n\n\treturn (\n\t\t<>\n\t\t\t<form onSubmit={onSubmit} className=\"w-full flex flex-col items-center justify-center\">\n\t\t\t\t<fieldset className=\"flex flex-col items-center space-y-6 sm:space-y-0 sm:grid sm:grid-cols-3 sm:gap-6\">\n\t\t\t\t\t<NumberFormat\n\t\t\t\t\t\tcustomInput={Input}\n\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\tlabel=\"Existing amount\"\n\t\t\t\t\t\tplaceholder=\"20,000\"\n\t\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\t\terrorMessage={errors.existingAmount?.message}\n\t\t\t\t\t\t{...register('existingAmount', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel=\"Expected yearly growth\"\n\t\t\t\t\t\tplaceholder=\"7\"\n\t\t\t\t\t\terrorMessage={errors.interestRate && 'Please provide a valid value'}\n\t\t\t\t\t\t{...register('interestRate', {\n\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t})}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel=\"Investment period\"\n\t\t\t\t\t\tplaceholder=\"10\"\n\t\t\t\t\t\terrorMessage={\n\t\t\t\t\t\t\terrors.investmentPeriod && 'Please provide a number of years you are investing'\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{...register('investmentPeriod', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel=\"Interval of interest accrual\"\n\t\t\t\t\t\tplaceholder=\"Yearly\"\n\t\t\t\t\t\terrorMessage={errors.interestAccural?.message}\n\t\t\t\t\t\t{...register('interestAccural', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberFormat\n\t\t\t\t\t\tcustomInput={Input}\n\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\tlabel=\"Monthly deposit\"\n\t\t\t\t\t\tplaceholder=\"10,000\"\n\t\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\t\terrorMessage={errors.monthlyDeposit?.message}\n\t\t\t\t\t\t{...register('monthlyDeposit', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t</fieldset>\n\t\t\t\t<div className=\"w-full pt-4 flex justify-center\">\n\t\t\t\t\t<Button type=\"submit\">Calculate</Button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t{data && (\n\t\t\t\t<CalculationSummary\n\t\t\t\t\texistingAmount={parse(data.existingAmount)}\n\t\t\t\t\tinterestRate={parse(data.interestRate)}\n\t\t\t\t\tinvestmentPeriod={parse(data.investmentPeriod)}\n\t\t\t\t\tmonthlyDeposit={parse(data.monthlyDeposit)}\n\t\t\t\t\tinterestAccural={data.interestAccural}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default CompoundInterest;\n\nconst formatter = Intl.NumberFormat('en-US', {\n\tstyle: 'currency',\n\tcurrency: 'DKK',\n});\n\nconst CalculationSummary = (props: FormData) => {\n\tconst r = useMemo(() => props.interestRate / 100, [props.interestRate]);\n\tconst isWithDeposits = useMemo(() => props.monthlyDeposit !== 0, [props.monthlyDeposit]);\n\n\tconst balance = FV(props.existingAmount, props.monthlyDeposit, r, props.investmentPeriod);\n\tconst totalDeposits = 12 * props.monthlyDeposit * props.investmentPeriod + props.existingAmount;\n\tconst totalInterest = balance - totalDeposits;\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"w-full flex flex-col items-center\">\n\t\t\t\t<div className=\"max-w-2xl w-full grid grid-cols-1 gap-y-4 gap-x-8 md:grid-cols-2 justify-center p-8\">\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={balance}\n\t\t\t\t\t\tlabel={`Balance after ${props.investmentPeriod} years`}\n\t\t\t\t\t\tcolor=\"bg-blue-900 dark:bg-blue-300\"\n\t\t\t\t\t/>\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={props.existingAmount}\n\t\t\t\t\t\tlabel={`Initial amount`}\n\t\t\t\t\t\tcolor=\"bg-green-900 dark:bg-green-300\"\n\t\t\t\t\t/>\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={totalDeposits}\n\t\t\t\t\t\tlabel={`Total deposits`}\n\t\t\t\t\t\tcolor=\"bg-indigo-900 dark:bg-indigo-300\"\n\t\t\t\t\t/>\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={totalInterest}\n\t\t\t\t\t\tlabel={'Gain from interest'}\n\t\t\t\t\t\tcolor=\"bg-yellow-900 dark:bg-yellow-300\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"overflow-x-scroll -mx-4 lg:overflow-x-auto lg:w-full lg:m-0\">\n\t\t\t\t<table className=\"w-full\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr className=\"text-right\">\n\t\t\t\t\t\t\t<th className=\"text-center\">Year</th>\n\t\t\t\t\t\t\t{isWithDeposits && <th>Deposit</th>}\n\t\t\t\t\t\t\t<th className=\"text-green-800 dark:text-green-400\">Interest</th>\n\t\t\t\t\t\t\t{isWithDeposits && <th>Total deposits</th>}\n\t\t\t\t\t\t\t<th className=\"text-purple-800 dark:text-purple-400\">Total interest</th>\n\t\t\t\t\t\t\t<th className=\"text-red-800 dark:text-red-400\">Balance</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody className=\"text-right font-mono\">\n\t\t\t\t\t\t{[...Array(props.investmentPeriod + 1).keys()].map((year) => {\n\t\t\t\t\t\t\tconst deposit = year === 0 ? props.existingAmount : 12 * props.monthlyDeposit;\n\t\t\t\t\t\t\tconst totalDeposit = year * 12 * props.monthlyDeposit + props.existingAmount;\n\t\t\t\t\t\t\tconst totalBalance = FV(props.existingAmount, props.monthlyDeposit, r, year);\n\t\t\t\t\t\t\tconst lastYear = year - 1;\n\n\t\t\t\t\t\t\tconst depositPrevious = lastYear * 12 * props.monthlyDeposit + props.existingAmount;\n\t\t\t\t\t\t\tconst balancePrevious = FV(props.existingAmount, props.monthlyDeposit, r, lastYear);\n\n\t\t\t\t\t\t\tconst totalInterest = totalBalance - totalDeposit;\n\t\t\t\t\t\t\tconst interest = year === 0 ? 0 : totalInterest - (balancePrevious - depositPrevious);\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<tr key={year} className=\"odd:bg-warmGray-200 dark:odd:bg-warmGray-900\">\n\t\t\t\t\t\t\t\t\t<td className=\"text-center\">{year}</td>\n\t\t\t\t\t\t\t\t\t{isWithDeposits && <td>{formatter.format(deposit)}</td>}\n\t\t\t\t\t\t\t\t\t<td>{formatter.format(interest)}</td>\n\t\t\t\t\t\t\t\t\t{isWithDeposits && <td>{formatter.format(totalDeposit)}</td>}\n\t\t\t\t\t\t\t\t\t<td>{formatter.format(totalInterest)}</td>\n\t\t\t\t\t\t\t\t\t<td>{formatter.format(totalBalance)}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\ntype AmountSummaryProps = {\n\tamount: number;\n\tlabel: string;\n\tcolor?: string;\n};\nconst AmountSummary: FC<AmountSummaryProps> = ({ amount, label, color }: AmountSummaryProps) => (\n\t<div className=\"flex space-x-4\">\n\t\t<div className={`w-6 h-6 rounded-full ${color}`}></div>\n\t\t<div>\n\t\t\t<span className=\"text-black dark:text-warmGray-300\">{label}</span>\n\t\t\t<div className=\"text-black dark:text-white text-2xl\">{formatter.format(amount)}</div>\n\t\t</div>\n\t</div>\n);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction parse(value: any): number {\n\treturn Number.parseFloat(value.toString().replace(/,/g, ''));\n}\n","import { Button, useDarkMode } from '@oliverflecke/components-react';\nimport React, { useEffect } from 'react';\nimport './compiled.css';\nimport AddAccount from './components/AddAccountModal';\nimport CompoundInterest from './components/CompoundInterest';\nimport Table from './components/Table';\nimport AccountService from './services/AccountService';\n\nconst accountService = new AccountService();\n\nconst App: React.FC = () => {\n\tconst { isDarkMode, setDarkMode } = useDarkMode();\n\n\tuseEffect(() => {\n\t\tif (isDarkMode) {\n\t\t\tif (!document.body.classList.contains('dark')) {\n\t\t\t\tdocument.body.classList.add('dark');\n\t\t\t}\n\t\t} else {\n\t\t\tdocument.body.classList.remove('dark');\n\t\t}\n\t}, [isDarkMode]);\n\n\treturn (\n\t\t<main className=\"h-screen bg-white dark:bg-warmGray-900 text-gray-900 dark:text-gray-200\">\n\t\t\t<header className=\"p-2 flex flex-row justify-between text-gray-300 bg-emerald-900 \">\n\t\t\t\t<h1 className=\"p-4 text-xl uppercase font-sans font-light\">Finance tracker</h1>\n\t\t\t\t<Button onClick={() => setDarkMode(!isDarkMode)}>Dark</Button>\n\t\t\t</header>\n\t\t\t{/* <section className=\"p-4\">\n\t\t\t\t<Table accounts={accountService.getAccounts()} />\n\t\t\t\t<AddAccount accountService={accountService} />\n\t\t\t</section> */}\n\n\t\t\t<section className=\"p-4 dark:bg-warmGray-700\">\n\t\t\t\t<h2 className=\"text-xl py-4 text-center lg:text-left\">Compound interest calculator</h2>\n\t\t\t\t<CompoundInterest />\n\t\t\t</section>\n\t\t</main>\n\t);\n};\n\nexport default App;\n","import { Account } from '../models/Account';\n\nclass AccountService {\n\tprivate accounts: Account[];\n\n\tconstructor() {\n\t\tconst data = localStorage.getItem('accounts') ?? '';\n\t\tconsole.log(data);\n\t\tthis.accounts = data === undefined || data === '' ? [] : JSON.parse(data);\n\t}\n\n\tpublic getAccounts(): Account[] {\n\t\treturn this.accounts;\n\t}\n\n\tpublic add(account: Account): void {\n\t\tthis.accounts.push(account);\n\t\tthis.save();\n\t}\n\n\tprivate save() {\n\t\tlocalStorage.setItem('accounts', JSON.stringify(this.accounts));\n\t}\n}\n\nexport default AccountService;\n","import React from 'react';\nimport { render, hydrate } from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root');\nconst Application = (\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>\n);\n\nif (rootElement?.hasChildNodes()) {\n\thydrate(Application, rootElement);\n} else {\n\trender(Application, rootElement);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}