{"version":3,"sources":["components/AddAccountModal.tsx","services/formulas.ts","components/CompoundInterest/index.tsx","components/Cell.tsx","components/Table.tsx","services/AccountService.ts","App.tsx","index.tsx"],"names":["AddAccount","addAccount","useState","showPrompt","setShowPrompt","useForm","register","handleSubmit","errors","formState","close","useCallback","onClick","x","isOpen","onDismiss","onSubmit","account","console","log","className","placeholder","label","required","errorMessage","name","type","buttonType","FV","P","A","r","year","n","rate","ratePerPaymentPeriod","nper","Math","pow","p","CompoundInterest","data","setData","d","customInput","Input","thousandSeparator","inputMode","existingAmount","message","interestRate","investmentPeriod","interestAccural","monthlyDeposit","parse","formatter","Intl","NumberFormat","style","currency","CalculationSummary","props","useMemo","isWithDeposits","balance","totalDeposits","totalInterest","amount","color","Array","keys","map","deposit","totalDeposit","totalBalance","lastYear","depositPrevious","balancePrevious","interest","format","AmountSummary","value","Number","parseFloat","toString","replace","Cell","entry","entryRef","useRef","onInput","currentTarget","innerText","NaN","contentEditable","ref","Table","accounts","entries","Object","date","accountReducer","state","action","newState","concat","warn","JSON","stringify","reducer","localStorage","setItem","getData","key","getItem","undefined","App","useDarkMode","isDarkMode","setDarkMode","useEffect","document","body","classList","contains","add","remove","AccountOverview","memo","useReducer","dispatch","displayName","rootElement","getElementById","Application","StrictMode","hasChildNodes","hydrate","render"],"mappings":"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","file":"static/js/main.6cf0990d.chunk.js","sourcesContent":["import { Button, ButtonContainer, Input, Modal } from '@oliverflecke/components-react';\nimport React, { FC, useCallback, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Account } from '../models/Account';\n\ninterface AddAccountProps {\n\taddAccount: (account: Account) => void;\n}\n\nconst AddAccount: FC<AddAccountProps> = ({ addAccount }: AddAccountProps) => {\n\tconst [showPrompt, setShowPrompt] = useState(false);\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },\n\t} = useForm<Account>();\n\tconst close = useCallback(() => setShowPrompt(false), [setShowPrompt]);\n\tconst onSubmit = (account: Account) => {\n\t\tconsole.log(`Adding account: ${account}`);\n\t\taddAccount(account);\n\t\tclose();\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Button onClick={() => setShowPrompt((x) => !x)}>Add account</Button>\n\t\t\t<Modal isOpen={showPrompt} onDismiss={close}>\n\t\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t\t<div className=\"p-4\">\n\t\t\t\t\t\t<h2 className=\"text-lg text-gray-700 dark:text-gray-400\">Add new account</h2>\n\n\t\t\t\t\t\t<fieldset className=\"space-y-2\">\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tplaceholder=\"Savings, Investments...\"\n\t\t\t\t\t\t\t\tlabel=\"Name\"\n\t\t\t\t\t\t\t\t{...register('name', { required: true })}\n\t\t\t\t\t\t\t\terrorMessage={errors.name && 'Please provide a name for your account'}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tplaceholder=\"Cash, Investment...\"\n\t\t\t\t\t\t\t\tlabel=\"Type\"\n\t\t\t\t\t\t\t\t{...register('type', { required: true })}\n\t\t\t\t\t\t\t\terrorMessage={errors.type && 'Please choose cash or investment'}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<ButtonContainer>\n\t\t\t\t\t\t<Button buttonType=\"Transparent\" onClick={close}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"submit\">Add</Button>\n\t\t\t\t\t</ButtonContainer>\n\t\t\t\t</form>\n\t\t\t</Modal>\n\t\t</>\n\t);\n};\n\nexport default AddAccount;\n","export type InterestAccrual = 'Yearly' | 'Monthly';\n\nexport function FV(P: number, A: number, r: number, year: number, n = 12): number {\n\tconst rate = ratePerPaymentPeriod(r, 1, n);\n\tconst nper = n * year;\n\treturn P * Math.pow(1 + rate, nper) + A * ((Math.pow(1 + rate, nper) - 1) / rate);\n}\n\nexport function compoundInterest(\n\tprincipal: number,\n\tinterestRate: number,\n\ttime: number,\n\tinterestAccrual: InterestAccrual\n): number {\n\tconst n = getInterestAccrualPerYear(interestAccrual);\n\treturn principal * Math.pow(1 + interestRate / n, n * time);\n}\n\nexport function futureValue(\n\tregularDeposit: number,\n\tinterestRate: number,\n\ttime: number,\n\tinterestAccrual: InterestAccrual,\n\tnumberOfDeposits: number,\n\tdepositsMadeAt: 'beginning' | 'end' = 'end'\n): number {\n\tconst n = getInterestAccrualPerYear(interestAccrual);\n\n\treturn (\n\t\tregularDeposit *\n\t\tnumberOfDeposits *\n\t\t(((Math.pow(1 + interestRate / n, n * time) - 1) / (interestRate / n)) *\n\t\t\t(depositsMadeAt === 'end' ? 1 : 1 + interestRate / n))\n\t);\n}\n\nexport function ratePerPaymentPeriod(r: number, n: number, p: number): number {\n\treturn Math.pow(1 + r / n, n / p) - 1;\n}\n\nfunction getInterestAccrualPerYear(interestAccrual: InterestAccrual): number {\n\tswitch (interestAccrual) {\n\t\tcase 'Monthly':\n\t\t\treturn 12;\n\n\t\tcase 'Yearly':\n\t\tdefault:\n\t\t\treturn 1;\n\t}\n}\n","import { Button, Input } from '@oliverflecke/components-react';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport NumberFormat from 'react-number-format';\nimport { FV, InterestAccrual } from '../../services/formulas';\n\ninterface CompoundInterestProps {\n\tname?: string;\n}\n\ntype FormData = {\n\texistingAmount: number;\n\tinterestRate: number;\n\tinvestmentPeriod: number;\n\tinterestAccural: InterestAccrual;\n\tmonthlyDeposit: number;\n};\n\nconst CompoundInterest: FC<CompoundInterestProps> = ({}: CompoundInterestProps) => {\n\tconst [data, setData] = useState<FormData | null>(null);\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },\n\t} = useForm<FormData>({});\n\tconst onSubmit = handleSubmit((d) => setData(d));\n\n\treturn (\n\t\t<>\n\t\t\t<form onSubmit={onSubmit} className=\"w-full flex flex-col items-center justify-center\">\n\t\t\t\t<fieldset className=\"flex flex-col items-center space-y-6 sm:space-y-0 sm:grid sm:grid-cols-3 sm:gap-6\">\n\t\t\t\t\t<NumberFormat\n\t\t\t\t\t\tcustomInput={Input}\n\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\tlabel=\"Existing amount\"\n\t\t\t\t\t\tplaceholder=\"20,000\"\n\t\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\t\terrorMessage={errors.existingAmount?.message}\n\t\t\t\t\t\t{...register('existingAmount', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel=\"Expected yearly growth\"\n\t\t\t\t\t\tplaceholder=\"7\"\n\t\t\t\t\t\terrorMessage={errors.interestRate && 'Please provide a valid value'}\n\t\t\t\t\t\t{...register('interestRate', {\n\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t})}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel=\"Investment period\"\n\t\t\t\t\t\tplaceholder=\"10\"\n\t\t\t\t\t\terrorMessage={\n\t\t\t\t\t\t\terrors.investmentPeriod && 'Please provide a number of years you are investing'\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{...register('investmentPeriod', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel=\"Interval of interest accrual\"\n\t\t\t\t\t\tplaceholder=\"Yearly\"\n\t\t\t\t\t\terrorMessage={errors.interestAccural?.message}\n\t\t\t\t\t\t{...register('interestAccural', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberFormat\n\t\t\t\t\t\tcustomInput={Input}\n\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\tlabel=\"Monthly deposit\"\n\t\t\t\t\t\tplaceholder=\"10,000\"\n\t\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\t\terrorMessage={errors.monthlyDeposit?.message}\n\t\t\t\t\t\t{...register('monthlyDeposit', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t</fieldset>\n\t\t\t\t<div className=\"w-full pt-4 flex justify-center\">\n\t\t\t\t\t<Button type=\"submit\">Calculate</Button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t{data && (\n\t\t\t\t<CalculationSummary\n\t\t\t\t\texistingAmount={parse(data.existingAmount)}\n\t\t\t\t\tinterestRate={parse(data.interestRate)}\n\t\t\t\t\tinvestmentPeriod={parse(data.investmentPeriod)}\n\t\t\t\t\tmonthlyDeposit={parse(data.monthlyDeposit)}\n\t\t\t\t\tinterestAccural={data.interestAccural}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default CompoundInterest;\n\nconst formatter = Intl.NumberFormat('en-US', {\n\tstyle: 'currency',\n\tcurrency: 'DKK',\n});\n\nconst CalculationSummary = (props: FormData) => {\n\tconst r = useMemo(() => props.interestRate / 100, [props.interestRate]);\n\tconst isWithDeposits = useMemo(() => props.monthlyDeposit !== 0, [props.monthlyDeposit]);\n\n\tconst balance = FV(props.existingAmount, props.monthlyDeposit, r, props.investmentPeriod);\n\tconst totalDeposits = 12 * props.monthlyDeposit * props.investmentPeriod + props.existingAmount;\n\tconst totalInterest = balance - totalDeposits;\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"w-full flex flex-col items-center\">\n\t\t\t\t<div className=\"max-w-2xl w-full grid grid-cols-1 gap-y-4 gap-x-8 md:grid-cols-2 justify-center p-8\">\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={balance}\n\t\t\t\t\t\tlabel={`Balance after ${props.investmentPeriod} years`}\n\t\t\t\t\t\tcolor=\"bg-blue-900 dark:bg-blue-300\"\n\t\t\t\t\t/>\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={props.existingAmount}\n\t\t\t\t\t\tlabel={`Initial amount`}\n\t\t\t\t\t\tcolor=\"bg-green-900 dark:bg-green-300\"\n\t\t\t\t\t/>\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={totalDeposits}\n\t\t\t\t\t\tlabel={`Total deposits`}\n\t\t\t\t\t\tcolor=\"bg-indigo-900 dark:bg-indigo-300\"\n\t\t\t\t\t/>\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={totalInterest}\n\t\t\t\t\t\tlabel={'Gain from interest'}\n\t\t\t\t\t\tcolor=\"bg-yellow-900 dark:bg-yellow-300\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"overflow-x-scroll -mx-4 lg:overflow-x-auto lg:w-full lg:m-0\">\n\t\t\t\t<table className=\"w-full\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr className=\"text-right\">\n\t\t\t\t\t\t\t<th className=\"text-center\">Year</th>\n\t\t\t\t\t\t\t{isWithDeposits && <th>Deposit</th>}\n\t\t\t\t\t\t\t<th className=\"text-green-800 dark:text-green-400\">Interest</th>\n\t\t\t\t\t\t\t{isWithDeposits && <th>Total deposits</th>}\n\t\t\t\t\t\t\t<th className=\"text-purple-800 dark:text-purple-400\">Total interest</th>\n\t\t\t\t\t\t\t<th className=\"text-red-800 dark:text-red-400\">Balance</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody className=\"text-right font-mono\">\n\t\t\t\t\t\t{[...Array(props.investmentPeriod + 1).keys()].map((year) => {\n\t\t\t\t\t\t\tconst deposit = year === 0 ? props.existingAmount : 12 * props.monthlyDeposit;\n\t\t\t\t\t\t\tconst totalDeposit = year * 12 * props.monthlyDeposit + props.existingAmount;\n\t\t\t\t\t\t\tconst totalBalance = FV(props.existingAmount, props.monthlyDeposit, r, year);\n\t\t\t\t\t\t\tconst lastYear = year - 1;\n\n\t\t\t\t\t\t\tconst depositPrevious = lastYear * 12 * props.monthlyDeposit + props.existingAmount;\n\t\t\t\t\t\t\tconst balancePrevious = FV(props.existingAmount, props.monthlyDeposit, r, lastYear);\n\n\t\t\t\t\t\t\tconst totalInterest = totalBalance - totalDeposit;\n\t\t\t\t\t\t\tconst interest = year === 0 ? 0 : totalInterest - (balancePrevious - depositPrevious);\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<tr key={year} className=\"odd:bg-warmGray-200 dark:odd:bg-warmGray-900\">\n\t\t\t\t\t\t\t\t\t<td className=\"text-center\">{year}</td>\n\t\t\t\t\t\t\t\t\t{isWithDeposits && <td>{formatter.format(deposit)}</td>}\n\t\t\t\t\t\t\t\t\t<td>{formatter.format(interest)}</td>\n\t\t\t\t\t\t\t\t\t{isWithDeposits && <td>{formatter.format(totalDeposit)}</td>}\n\t\t\t\t\t\t\t\t\t<td>{formatter.format(totalInterest)}</td>\n\t\t\t\t\t\t\t\t\t<td>{formatter.format(totalBalance)}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\ntype AmountSummaryProps = {\n\tamount: number;\n\tlabel: string;\n\tcolor?: string;\n};\nconst AmountSummary: FC<AmountSummaryProps> = ({ amount, label, color }: AmountSummaryProps) => (\n\t<div className=\"flex space-x-4\">\n\t\t<div className={`w-6 h-6 rounded-full ${color}`}></div>\n\t\t<div>\n\t\t\t<span className=\"text-black dark:text-warmGray-300\">{label}</span>\n\t\t\t<div className=\"text-black dark:text-white text-2xl\">{formatter.format(amount)}</div>\n\t\t</div>\n\t</div>\n);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction parse(value: any): number {\n\treturn Number.parseFloat(value.toString().replace(/,/g, ''));\n}\n","import React, { FC, useCallback, useRef } from 'react';\nimport { Account, DateEntry } from '../models/Account';\n\ninterface CellProps {\n\taccount: Account;\n\tentry: DateEntry;\n}\n\nconst Cell: FC<CellProps> = ({ account, entry }: CellProps) => {\n\tconst entryRef = useRef<HTMLTableDataCellElement>(null);\n\tconst onInput = useCallback(\n\t\t(x: React.FormEvent<HTMLTableDataCellElement>) => {\n\t\t\tconst amount = Number.parseFloat(x.currentTarget.innerText);\n\t\t\tconsole.log(`Amount: ${amount}`);\n\t\t\tif (amount !== NaN) {\n\t\t\t\tentry[account.name] = amount;\n\t\t\t}\n\t\t},\n\t\t[entry, account]\n\t);\n\n\treturn (\n\t\t<td\n\t\t\tkey={account.name}\n\t\t\tcontentEditable\n\t\t\tref={entryRef}\n\t\t\tonInput={onInput}\n\t\t\tclassName=\"px-2 text-right\"\n\t\t>\n\t\t\t{entry[account.name]}\n\t\t</td>\n\t);\n};\n\nexport default Cell;\n","import React, { FC } from 'react';\nimport { Account, AccountEntries } from '../models/Account';\nimport Cell from './Cell';\n\ninterface TableProps {\n\taccounts: Account[];\n\tentries: AccountEntries;\n}\n\nconst Table: FC<TableProps> = ({ accounts, entries }: TableProps) => {\n\tconsole.log(accounts);\n\n\treturn (\n\t\t<table className=\"w-full\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Date</th>\n\t\t\t\t\t{accounts.map((account) => (\n\t\t\t\t\t\t<th key={account.name}>\n\t\t\t\t\t\t\t<span>{account.name}</span>\n\t\t\t\t\t\t</th>\n\t\t\t\t\t))}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody className=\"\">\n\t\t\t\t{Object.keys(entries).map((date) => (\n\t\t\t\t\t<tr key={date} className=\"odd:bg-gray-300 dark:odd:bg-gray-900\">\n\t\t\t\t\t\t<td>{date}</td>\n\t\t\t\t\t\t{accounts.map((account) => (\n\t\t\t\t\t\t\t<Cell key={account.name} account={account} entry={entries[date]} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tr>\n\t\t\t\t))}\n\t\t\t</tbody>\n\t\t</table>\n\t);\n};\n\nexport default Table;\n","import { Account, AccountEntries } from '../models/Account';\n\nexport interface AccountState {\n\taccounts: Account[];\n\tentries: AccountEntries;\n}\n\nexport function accountReducer(state: AccountState, action: AccountAction): AccountState {\n\tconst newState = reducer(state, action);\n\n\tlocalStorage.setItem('accounts', JSON.stringify(newState.accounts));\n\tlocalStorage.setItem('entries', JSON.stringify(newState.entries));\n\n\treturn newState;\n}\nexport function initAccountState(): AccountState {\n\treturn {\n\t\taccounts: getData('accounts'),\n\t\tentries: getData('entries'),\n\t};\n}\n\nexport type AccountAction = { type: 'add account'; account: Account } | { type: 'add entry' };\n\nfunction reducer(state: AccountState, action: AccountAction): AccountState {\n\tswitch (action.type) {\n\t\tcase 'add account':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\taccounts: state.accounts.concat(action.account),\n\t\t\t};\n\t\tcase 'add entry':\n\t\t\tstate.entries['2021-05-16'] = {};\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t};\n\n\t\tdefault:\n\t\t\tconsole.warn(`action type not handled: ${JSON.stringify(action)}`);\n\t\t\treturn state;\n\t}\n}\n\nfunction getData(key: string): any {\n\tconst data = localStorage.getItem(key) ?? '';\n\treturn data === undefined || data === '' ? [] : JSON.parse(data);\n}\n","import { Button, useDarkMode } from '@oliverflecke/components-react';\nimport React, { memo, useEffect, useReducer } from 'react';\nimport './compiled.css';\nimport AddAccount from './components/AddAccountModal';\nimport CompoundInterest from './components/CompoundInterest';\nimport Table from './components/Table';\nimport { accountReducer, initAccountState } from './services/AccountService';\n\nconst App: React.FC = () => {\n\tconst { isDarkMode, setDarkMode } = useDarkMode();\n\n\tuseEffect(() => {\n\t\tif (isDarkMode) {\n\t\t\tif (!document.body.classList.contains('dark')) {\n\t\t\t\tdocument.body.classList.add('dark');\n\t\t\t}\n\t\t} else {\n\t\t\tdocument.body.classList.remove('dark');\n\t\t}\n\t}, [isDarkMode]);\n\n\treturn (\n\t\t<main className=\"h-screen bg-white dark:bg-warmGray-900 text-gray-900 dark:text-gray-200\">\n\t\t\t<header className=\"p-2 flex flex-row justify-between text-gray-300 bg-emerald-900 \">\n\t\t\t\t<h1 className=\"p-4 text-xl uppercase font-sans font-light\">Finance tracker</h1>\n\t\t\t\t<Button onClick={() => setDarkMode(!isDarkMode)}>Dark</Button>\n\t\t\t</header>\n\t\t\t<section className=\"p-4\">\n\t\t\t\t<AccountOverview />\n\t\t\t</section>\n\n\t\t\t<section className=\"p-4 dark:bg-warmGray-700\">\n\t\t\t\t<h2 className=\"text-xl py-4 text-center lg:text-left\">Compound interest calculator</h2>\n\t\t\t\t<CompoundInterest />\n\t\t\t</section>\n\t\t</main>\n\t);\n};\n\nexport default App;\n\nconst AccountOverview = memo(() => {\n\tconst [state, dispatch] = useReducer(accountReducer, initAccountState());\n\n\treturn (\n\t\t<>\n\t\t\t<Table accounts={state.accounts} entries={state.entries} />\n\t\t\t<div className=\"py-4 flex flex-row justify-between\">\n\t\t\t\t<AddAccount addAccount={(account) => dispatch({ type: 'add account', account })} />\n\t\t\t\t<Button buttonType=\"Primary\" onClick={() => dispatch({ type: 'add entry' })}>\n\t\t\t\t\tAdd entry\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</>\n\t);\n});\nAccountOverview.displayName = 'AccountOverview';\n","import React from 'react';\nimport { render, hydrate } from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root');\nconst Application = (\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>\n);\n\nif (rootElement?.hasChildNodes()) {\n\thydrate(Application, rootElement);\n} else {\n\trender(Application, rootElement);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}