{"version":3,"sources":["components/AddAccountModal.tsx","utils/converters.ts","services/AccountService.ts","components/AddEntryModal.tsx","services/formulas.ts","components/CompoundInterest/index.tsx","components/Cell.tsx","components/Table.tsx","App.tsx","index.tsx"],"names":["AddAccount","addAccount","useState","showPrompt","setShowPrompt","useForm","register","handleSubmit","errors","formState","close","useCallback","onClick","x","isOpen","onDismiss","onSubmit","account","console","log","className","placeholder","label","required","errorMessage","name","type","buttonType","parseNumber","value","Number","parseFloat","toString","replace","currencyFormatter","Intl","NumberFormat","style","currency","sortObject","unordered","Object","keys","sort","reduce","obj","key","AccountContext","createContext","state","accounts","entries","dispatch","_","accountReducer","action","newState","concat","date","warn","JSON","stringify","reducer","localStorage","setItem","debug","getData","defaultValue","data","getItem","undefined","parse","AddEntryModal","memo","useContext","setIsOpen","dismiss","displayName","FV","P","A","r","year","n","rate","ratePerPaymentPeriod","nper","Math","pow","p","CompoundInterest","setData","d","customInput","Input","thousandSeparator","inputMode","existingAmount","message","interestRate","investmentPeriod","interestAccural","monthlyDeposit","formatter","CalculationSummary","props","useMemo","isWithDeposits","balance","totalDeposits","totalInterest","amount","color","Array","map","deposit","totalDeposit","totalBalance","lastYear","depositPrevious","balancePrevious","interest","format","AmountSummary","Cell","entry","entryRef","useRef","onBlur","element","currentTarget","innerText","NaN","contentEditable","ref","Table","total","filterAndSum","totalCash","totalInvested","filter","acc","App","useDarkModeWithClass","isDarkMode","setDarkMode","darkMode","onToggle","AccountOverview","useReducer","Provider","rootElement","document","getElementById","Application","StrictMode","hasChildNodes","hydrate","render"],"mappings":"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","file":"static/js/main.e8f31f83.chunk.js","sourcesContent":["import { Button, ButtonContainer, Input, Modal } from '@oliverflecke/components-react';\nimport React, { FC, useCallback, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Account } from '../models/Account';\n\ninterface AddAccountProps {\n\taddAccount: (account: Account) => void;\n}\n\nconst AddAccount: FC<AddAccountProps> = ({ addAccount }: AddAccountProps) => {\n\tconst [showPrompt, setShowPrompt] = useState(false);\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },\n\t} = useForm<Account>();\n\tconst close = useCallback(() => setShowPrompt(false), [setShowPrompt]);\n\tconst onSubmit = (account: Account) => {\n\t\tconsole.log(`Adding account: ${account}`);\n\t\taddAccount(account);\n\t\tclose();\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Button onClick={() => setShowPrompt((x) => !x)}>Add account</Button>\n\t\t\t<Modal isOpen={showPrompt} onDismiss={close}>\n\t\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t\t<div className=\"p-4\">\n\t\t\t\t\t\t<h2 className=\"text-lg text-gray-700 dark:text-gray-400\">Add new account</h2>\n\n\t\t\t\t\t\t<fieldset className=\"space-y-2\">\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tplaceholder=\"Savings, Investments...\"\n\t\t\t\t\t\t\t\tlabel=\"Name\"\n\t\t\t\t\t\t\t\t{...register('name', { required: true })}\n\t\t\t\t\t\t\t\terrorMessage={errors.name && 'Please provide a name for your account'}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tplaceholder=\"Cash, Investment...\"\n\t\t\t\t\t\t\t\tlabel=\"Type\"\n\t\t\t\t\t\t\t\t{...register('type', { required: true })}\n\t\t\t\t\t\t\t\terrorMessage={errors.type && 'Please choose cash or investment'}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<ButtonContainer>\n\t\t\t\t\t\t<Button buttonType=\"Transparent\" onClick={close}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"submit\">Add</Button>\n\t\t\t\t\t</ButtonContainer>\n\t\t\t\t</form>\n\t\t\t</Modal>\n\t\t</>\n\t);\n};\n\nexport default AddAccount;\n","// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function parseNumber(value: any): number {\n\treturn Number.parseFloat(value.toString().replace(/[,a-zA-Z]/g, ''));\n}\n\nexport const currencyFormatter = Intl.NumberFormat('en-US', {\n\tstyle: 'currency',\n\tcurrency: 'DKK',\n});\n\nexport function sortObject(unordered: any): any {\n\treturn (\n\t\tObject.keys(unordered)\n\t\t\t.sort()\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t.reduce((obj: { [key: string]: any }, key) => {\n\t\t\t\tobj[key] = unordered[key];\n\t\t\t\treturn obj;\n\t\t\t}, {})\n\t);\n}\n","import { createContext } from 'react';\nimport { Account, AccountEntries } from '../models/Account';\nimport { sortObject } from '../utils/converters';\n\nexport const AccountContext = createContext({\n\tstate: {\n\t\taccounts: [] as Account[],\n\t\tentries: {},\n\t},\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\tdispatch: (_: AccountAction) => {},\n});\n\nexport interface AccountState {\n\taccounts: Account[];\n\tentries: AccountEntries;\n}\n\nexport function accountReducer(state: AccountState, action: AccountAction): AccountState {\n\tconsole.log(`Got action '${action.type}'`);\n\tconst newState = reducer(state, action);\n\n\tlocalStorage.setItem('accounts', JSON.stringify(newState.accounts));\n\tlocalStorage.setItem('entries', JSON.stringify(newState.entries));\n\n\tconsole.debug(newState);\n\n\treturn newState;\n}\nexport function initAccountState(): AccountState {\n\treturn {\n\t\taccounts: getData('accounts', []),\n\t\tentries: sortObject(getData('entries', {})),\n\t};\n}\n\nexport type AccountAction =\n\t| { type: 'add account'; account: Account }\n\t| { type: 'add entry'; date: string }\n\t| { type: 'edit entry for account'; name: string; value: number; key: string };\n\nfunction reducer(state: AccountState, action: AccountAction): AccountState {\n\tswitch (action.type) {\n\t\tcase 'add account':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\taccounts: state.accounts.concat(action.account),\n\t\t\t};\n\t\tcase 'add entry':\n\t\t\tstate.entries[action.date] = {};\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t};\n\t\tcase 'edit entry for account':\n\t\t\tstate.entries[action.key][action.name] = action.value;\n\t\t\tstate.entries = sortObject(state.entries);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t};\n\n\t\tdefault:\n\t\t\tconsole.warn(`action type not handled: ${JSON.stringify(action)}`);\n\t\t\treturn state;\n\t}\n}\n\nfunction getData(key: string, defaultValue: any = {}): any {\n\tconst data = localStorage.getItem(key) ?? '';\n\treturn data === undefined || data === '' ? defaultValue : JSON.parse(data);\n}\n","import { Button, ButtonContainer, Input, Modal } from '@oliverflecke/components-react';\nimport React, { FC, memo, useCallback, useContext, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { AccountContext } from '../services/AccountService';\n\nconst AddEntryModal: FC = memo(() => {\n\tconst { dispatch } = useContext(AccountContext);\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst dismiss = useCallback(() => setIsOpen(false), [setIsOpen]);\n\n\tconst { register, handleSubmit } = useForm<{ date: string }>();\n\tconst onSubmit = handleSubmit(({ date }) => {\n\t\tdispatch({ type: 'add entry', date });\n\t\tdismiss();\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<Button buttonType=\"Primary\" onClick={() => setIsOpen(true)}>\n\t\t\t\tAdd entry\n\t\t\t</Button>\n\t\t\t<Modal isOpen={isOpen} onDismiss={dismiss}>\n\t\t\t\t<form onSubmit={onSubmit}>\n\t\t\t\t\t<div className=\"p-4\">\n\t\t\t\t\t\t<h2 className=\"text-lg text-gray-700 dark:text-gray-400\">Add new entry on date</h2>\n\t\t\t\t\t\t<Input type=\"date\" className=\"m-4\" {...register('date')} />\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<ButtonContainer>\n\t\t\t\t\t\t<Button buttonType=\"Primary\" type=\"submit\">\n\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonContainer>\n\t\t\t\t</form>\n\t\t\t</Modal>\n\t\t</>\n\t);\n});\nAddEntryModal.displayName = 'AddEntryModal';\n\nexport default AddEntryModal;\n","export type InterestAccrual = 'Yearly' | 'Monthly';\n\nexport function FV(P: number, A: number, r: number, year: number, n = 12): number {\n\tconst rate = ratePerPaymentPeriod(r, 1, n);\n\tconst nper = n * year;\n\treturn P * Math.pow(1 + rate, nper) + A * ((Math.pow(1 + rate, nper) - 1) / rate);\n}\n\nexport function compoundInterest(\n\tprincipal: number,\n\tinterestRate: number,\n\ttime: number,\n\tinterestAccrual: InterestAccrual\n): number {\n\tconst n = getInterestAccrualPerYear(interestAccrual);\n\treturn principal * Math.pow(1 + interestRate / n, n * time);\n}\n\nexport function futureValue(\n\tregularDeposit: number,\n\tinterestRate: number,\n\ttime: number,\n\tinterestAccrual: InterestAccrual,\n\tnumberOfDeposits: number,\n\tdepositsMadeAt: 'beginning' | 'end' = 'end'\n): number {\n\tconst n = getInterestAccrualPerYear(interestAccrual);\n\n\treturn (\n\t\tregularDeposit *\n\t\tnumberOfDeposits *\n\t\t(((Math.pow(1 + interestRate / n, n * time) - 1) / (interestRate / n)) *\n\t\t\t(depositsMadeAt === 'end' ? 1 : 1 + interestRate / n))\n\t);\n}\n\nexport function ratePerPaymentPeriod(r: number, n: number, p: number): number {\n\treturn Math.pow(1 + r / n, n / p) - 1;\n}\n\nfunction getInterestAccrualPerYear(interestAccrual: InterestAccrual): number {\n\tswitch (interestAccrual) {\n\t\tcase 'Monthly':\n\t\t\treturn 12;\n\n\t\tcase 'Yearly':\n\t\tdefault:\n\t\t\treturn 1;\n\t}\n}\n","import { Button, Input } from '@oliverflecke/components-react';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport NumberFormat from 'react-number-format';\nimport { FV, InterestAccrual } from '../../services/formulas';\nimport { parseNumber } from '../../utils/converters';\n\ninterface CompoundInterestProps {\n\tname?: string;\n}\n\ntype FormData = {\n\texistingAmount: number;\n\tinterestRate: number;\n\tinvestmentPeriod: number;\n\tinterestAccural: InterestAccrual;\n\tmonthlyDeposit: number;\n};\n\nconst CompoundInterest: FC<CompoundInterestProps> = ({}: CompoundInterestProps) => {\n\tconst [data, setData] = useState<FormData | null>(null);\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tformState: { errors },\n\t} = useForm<FormData>({});\n\tconst onSubmit = handleSubmit((d) => setData(d));\n\n\treturn (\n\t\t<>\n\t\t\t<form onSubmit={onSubmit} className=\"w-full flex flex-col items-center justify-center\">\n\t\t\t\t<fieldset className=\"flex flex-col items-center space-y-6 sm:space-y-0 sm:grid sm:grid-cols-3 sm:gap-6\">\n\t\t\t\t\t<NumberFormat\n\t\t\t\t\t\tcustomInput={Input}\n\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\tlabel=\"Existing amount\"\n\t\t\t\t\t\tplaceholder=\"20,000\"\n\t\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\t\terrorMessage={errors.existingAmount?.message}\n\t\t\t\t\t\t{...register('existingAmount', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel=\"Expected yearly growth\"\n\t\t\t\t\t\tplaceholder=\"7\"\n\t\t\t\t\t\terrorMessage={errors.interestRate && 'Please provide a valid value'}\n\t\t\t\t\t\t{...register('interestRate', {\n\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t})}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel=\"Investment period\"\n\t\t\t\t\t\tplaceholder=\"10\"\n\t\t\t\t\t\terrorMessage={\n\t\t\t\t\t\t\terrors.investmentPeriod && 'Please provide a number of years you are investing'\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{...register('investmentPeriod', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tlabel=\"Interval of interest accrual\"\n\t\t\t\t\t\tplaceholder=\"Yearly\"\n\t\t\t\t\t\terrorMessage={errors.interestAccural?.message}\n\t\t\t\t\t\t{...register('interestAccural', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t\t<NumberFormat\n\t\t\t\t\t\tcustomInput={Input}\n\t\t\t\t\t\tthousandSeparator={true}\n\t\t\t\t\t\tlabel=\"Monthly deposit\"\n\t\t\t\t\t\tplaceholder=\"10,000\"\n\t\t\t\t\t\tinputMode=\"numeric\"\n\t\t\t\t\t\terrorMessage={errors.monthlyDeposit?.message}\n\t\t\t\t\t\t{...register('monthlyDeposit', { required: true })}\n\t\t\t\t\t/>\n\t\t\t\t</fieldset>\n\t\t\t\t<div className=\"w-full pt-4 flex justify-center\">\n\t\t\t\t\t<Button type=\"submit\">Calculate</Button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t{data && (\n\t\t\t\t<CalculationSummary\n\t\t\t\t\texistingAmount={parseNumber(data.existingAmount)}\n\t\t\t\t\tinterestRate={parseNumber(data.interestRate)}\n\t\t\t\t\tinvestmentPeriod={parseNumber(data.investmentPeriod)}\n\t\t\t\t\tmonthlyDeposit={parseNumber(data.monthlyDeposit)}\n\t\t\t\t\tinterestAccural={data.interestAccural}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default CompoundInterest;\n\nconst formatter = Intl.NumberFormat('en-US', {\n\tstyle: 'currency',\n\tcurrency: 'DKK',\n});\n\nconst CalculationSummary = (props: FormData) => {\n\tconst r = useMemo(() => props.interestRate / 100, [props.interestRate]);\n\tconst isWithDeposits = useMemo(() => props.monthlyDeposit !== 0, [props.monthlyDeposit]);\n\n\tconst balance = FV(props.existingAmount, props.monthlyDeposit, r, props.investmentPeriod);\n\tconst totalDeposits = 12 * props.monthlyDeposit * props.investmentPeriod + props.existingAmount;\n\tconst totalInterest = balance - totalDeposits;\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"w-full flex flex-col items-center\">\n\t\t\t\t<div className=\"max-w-2xl w-full grid grid-cols-1 gap-y-4 gap-x-8 md:grid-cols-2 justify-center p-8\">\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={balance}\n\t\t\t\t\t\tlabel={`Balance after ${props.investmentPeriod} years`}\n\t\t\t\t\t\tcolor=\"bg-blue-900 dark:bg-blue-300\"\n\t\t\t\t\t/>\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={props.existingAmount}\n\t\t\t\t\t\tlabel={`Initial amount`}\n\t\t\t\t\t\tcolor=\"bg-green-900 dark:bg-green-300\"\n\t\t\t\t\t/>\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={totalDeposits}\n\t\t\t\t\t\tlabel={`Total deposits`}\n\t\t\t\t\t\tcolor=\"bg-indigo-900 dark:bg-indigo-300\"\n\t\t\t\t\t/>\n\t\t\t\t\t<AmountSummary\n\t\t\t\t\t\tamount={totalInterest}\n\t\t\t\t\t\tlabel={'Gain from interest'}\n\t\t\t\t\t\tcolor=\"bg-yellow-900 dark:bg-yellow-300\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"overflow-x-scroll -mx-4 lg:overflow-x-auto lg:w-full lg:m-0\">\n\t\t\t\t<table className=\"w-full\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr className=\"text-right\">\n\t\t\t\t\t\t\t<th className=\"text-center\">Year</th>\n\t\t\t\t\t\t\t{isWithDeposits && <th>Deposit</th>}\n\t\t\t\t\t\t\t<th className=\"text-green-800 dark:text-green-400\">Interest</th>\n\t\t\t\t\t\t\t{isWithDeposits && <th>Total deposits</th>}\n\t\t\t\t\t\t\t<th className=\"text-purple-800 dark:text-purple-400\">Total interest</th>\n\t\t\t\t\t\t\t<th className=\"text-red-800 dark:text-red-400\">Balance</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody className=\"text-right font-mono\">\n\t\t\t\t\t\t{[...Array(props.investmentPeriod + 1).keys()].map((year) => {\n\t\t\t\t\t\t\tconst deposit = year === 0 ? props.existingAmount : 12 * props.monthlyDeposit;\n\t\t\t\t\t\t\tconst totalDeposit = year * 12 * props.monthlyDeposit + props.existingAmount;\n\t\t\t\t\t\t\tconst totalBalance = FV(props.existingAmount, props.monthlyDeposit, r, year);\n\t\t\t\t\t\t\tconst lastYear = year - 1;\n\n\t\t\t\t\t\t\tconst depositPrevious = lastYear * 12 * props.monthlyDeposit + props.existingAmount;\n\t\t\t\t\t\t\tconst balancePrevious = FV(props.existingAmount, props.monthlyDeposit, r, lastYear);\n\n\t\t\t\t\t\t\tconst totalInterest = totalBalance - totalDeposit;\n\t\t\t\t\t\t\tconst interest = year === 0 ? 0 : totalInterest - (balancePrevious - depositPrevious);\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<tr key={year} className=\"odd:bg-warmGray-200 dark:odd:bg-warmGray-900\">\n\t\t\t\t\t\t\t\t\t<td className=\"text-center\">{year}</td>\n\t\t\t\t\t\t\t\t\t{isWithDeposits && <td>{formatter.format(deposit)}</td>}\n\t\t\t\t\t\t\t\t\t<td>{formatter.format(interest)}</td>\n\t\t\t\t\t\t\t\t\t{isWithDeposits && <td>{formatter.format(totalDeposit)}</td>}\n\t\t\t\t\t\t\t\t\t<td>{formatter.format(totalInterest)}</td>\n\t\t\t\t\t\t\t\t\t<td>{formatter.format(totalBalance)}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\ntype AmountSummaryProps = {\n\tamount: number;\n\tlabel: string;\n\tcolor?: string;\n};\nconst AmountSummary: FC<AmountSummaryProps> = ({ amount, label, color }: AmountSummaryProps) => (\n\t<div className=\"flex space-x-4\">\n\t\t<div className={`w-6 h-6 rounded-full ${color}`}></div>\n\t\t<div>\n\t\t\t<span className=\"text-black dark:text-warmGray-300\">{label}</span>\n\t\t\t<div className=\"text-black dark:text-white text-2xl\">{formatter.format(amount)}</div>\n\t\t</div>\n\t</div>\n);\n","import React, { FC, useCallback, useContext, useRef } from 'react';\nimport { Account, DateEntry } from '../models/Account';\nimport { AccountContext } from '../services/AccountService';\nimport { currencyFormatter, parseNumber } from '../utils/converters';\n\ninterface CellProps {\n\taccount: Account;\n\tentry: DateEntry;\n\tdate: string;\n}\n\nconst Cell: FC<CellProps> = ({ account, entry, date }: CellProps) => {\n\tconst { dispatch } = useContext(AccountContext);\n\tconst entryRef = useRef<HTMLTableDataCellElement>(null);\n\tconst onBlur = useCallback(\n\t\t(element: React.FormEvent<HTMLTableDataCellElement>) => {\n\t\t\tconst amount = parseNumber(element.currentTarget.innerText);\n\t\t\tif (amount !== NaN) {\n\t\t\t\tconsole.log(`Got amount ${amount}`);\n\t\t\t\tdispatch({ type: 'edit entry for account', name: account.name, key: date, value: amount });\n\t\t\t}\n\t\t},\n\t\t[account.name, date, dispatch]\n\t);\n\n\tconst value = currencyFormatter.format(entry[account.name] ?? 0);\n\n\treturn (\n\t\t<td\n\t\t\tkey={account.name}\n\t\t\tcontentEditable\n\t\t\tref={entryRef}\n\t\t\tonBlur={onBlur}\n\t\t\tclassName=\"px-2 text-right\"\n\t\t>\n\t\t\t{value}\n\t\t</td>\n\t);\n};\n\nexport default Cell;\n","import React, { FC } from 'react';\nimport { Account, AccountEntries } from '../models/Account';\nimport { currencyFormatter } from '../utils/converters';\nimport Cell from './Cell';\n\ninterface TableProps {\n\taccounts: Account[];\n\tentries: AccountEntries;\n}\n\nconst Table: FC<TableProps> = ({ accounts, entries }: TableProps) => {\n\treturn (\n\t\t<div className=\"h-full overflow-x-auto\">\n\t\t\t<table className=\"w-full\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr className=\"text-right whitespace-nowrap\">\n\t\t\t\t\t\t<th className=\"text-center\">Date</th>\n\t\t\t\t\t\t<th className=\"text-blue-700\">Total</th>\n\t\t\t\t\t\t<th className=\"text-green-700\">Total cash</th>\n\t\t\t\t\t\t<th className=\"text-purple-700\">Total investments</th>\n\t\t\t\t\t\t{accounts.map((account) => (\n\t\t\t\t\t\t\t<th key={account.name}>\n\t\t\t\t\t\t\t\t<span>{account.name}</span>\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody className=\"\">\n\t\t\t\t\t{Object.keys(entries).map((date) => {\n\t\t\t\t\t\tconst total = filterAndSum(accounts, entries, date);\n\t\t\t\t\t\tconst totalCash = filterAndSum(accounts, entries, date, (x) => x.type === 'Cash');\n\t\t\t\t\t\tconst totalInvested = filterAndSum(\n\t\t\t\t\t\t\taccounts,\n\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\tdate,\n\t\t\t\t\t\t\t(x) => x.type === 'Investment'\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr\n\t\t\t\t\t\t\t\tkey={date}\n\t\t\t\t\t\t\t\tclassName=\"odd:bg-gray-300 dark:odd:bg-warmGray-800 text-right whitespace-nowrap font-mono\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<td className=\"text-center\">{date}</td>\n\t\t\t\t\t\t\t\t<td className=\"text-blue-700\">{currencyFormatter.format(total)}</td>\n\t\t\t\t\t\t\t\t<td className=\"text-green-500\">{currencyFormatter.format(totalCash)}</td>\n\t\t\t\t\t\t\t\t<td className=\"text-green-500\">{currencyFormatter.format(totalInvested)}</td>\n\t\t\t\t\t\t\t\t{accounts.map((account) => (\n\t\t\t\t\t\t\t\t\t<Cell key={account.name} account={account} entry={entries[date]} date={date} />\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n};\n\nexport default Table;\n\nfunction filterAndSum(\n\taccounts: Account[],\n\tentries: AccountEntries,\n\tdate: string,\n\tfilter: (account: Account) => boolean = (_) => true\n): number {\n\treturn accounts\n\t\t.filter(filter)\n\t\t.map((x) => entries[date][x.name] ?? 0)\n\t\t.reduce((acc, x) => acc + x, 0);\n}\n","import { DarkModeToggle, useDarkModeWithClass } from '@oliverflecke/components-react';\nimport React, { memo, useReducer } from 'react';\nimport './compiled.css';\nimport AddAccount from './components/AddAccountModal';\nimport AddEntryModal from './components/AddEntryModal';\nimport CompoundInterest from './components/CompoundInterest';\nimport Table from './components/Table';\nimport { AccountContext, accountReducer, initAccountState } from './services/AccountService';\n\nconst App: React.FC = () => {\n\tconst { isDarkMode, setDarkMode } = useDarkModeWithClass();\n\n\treturn (\n\t\t<main className=\"h-screen bg-white dark:bg-warmGray-900 text-gray-900 dark:text-gray-200\">\n\t\t\t<header className=\"p-2 flex flex-row justify-between text-gray-300 bg-emerald-900 \">\n\t\t\t\t<h1 className=\"p-4 text-xl uppercase font-sans font-light\">Finance tracker</h1>\n\t\t\t\t<div className=\"p-4\">\n\t\t\t\t\t<DarkModeToggle darkMode={isDarkMode} onToggle={() => setDarkMode(!isDarkMode)} />\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<section className=\"p-4\">\n\t\t\t\t<AccountOverview />\n\t\t\t</section>\n\n\t\t\t<section className=\"p-4 dark:bg-warmGray-700\">\n\t\t\t\t<h2 className=\"text-xl py-4 text-center lg:text-left\">Compound interest calculator</h2>\n\t\t\t\t<CompoundInterest />\n\t\t\t</section>\n\t\t</main>\n\t);\n};\n\nexport default App;\n\nconst AccountOverview = memo(() => {\n\tconst [state, dispatch] = useReducer(accountReducer, initAccountState());\n\n\treturn (\n\t\t<AccountContext.Provider value={{ state, dispatch }}>\n\t\t\t<Table accounts={state.accounts} entries={state.entries} />\n\t\t\t<div className=\"py-4 flex flex-row justify-between\">\n\t\t\t\t<AddAccount addAccount={(account) => dispatch({ type: 'add account', account })} />\n\t\t\t\t<AddEntryModal />\n\t\t\t</div>\n\t\t</AccountContext.Provider>\n\t);\n});\nAccountOverview.displayName = 'AccountOverview';\n","import React from 'react';\nimport { render, hydrate } from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root');\nconst Application = (\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>\n);\n\nif (rootElement?.hasChildNodes()) {\n\thydrate(Application, rootElement);\n} else {\n\trender(Application, rootElement);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}